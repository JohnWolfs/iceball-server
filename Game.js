"use strict";
var RoomManager_1 = require('./room/RoomManager');
var TimerConfig = {
    time: 184
};
var Game = (function () {
    function Game(rid, userlist) {
        this._keyframe = 0;
        this._ctrlList = [];
        this._time = TimerConfig.time;
        this._frame = 0;
        this._rid = rid;
        this._uidList = [userlist[0].uid, userlist[1].uid];
        this._io = RoomManager_1.default.Instance.io;
    }
    Game.prototype.start = function () {
        var _this = this;
        var random = Math.random() > .5 ? 1 : 0;
        var directionList = [];
        for (var i = 0; i < 8; i++) {
            directionList.push(Math.random() > .5 ? 1 : 0);
        }
        RoomManager_1.default.Instance.io.to(this._rid).emit('game:start', { info: 'start', directions: directionList, id: random ? this._uidList[0] : this._uidList[1] });
        this._tid = setInterval(function () {
            _this.sendFrame();
            _this._frame++;
            if (_this._frame >= 60) {
                _this._frame = 0;
                _this._time--;
                if (_this._time <= 0) {
                    var room = RoomManager_1.default.Instance.getRoom(_this._rid);
                    RoomManager_1.default.Instance.io.to(_this._rid).emit('game:scores', { scores: room.scoreHelper.getScore() });
                    RoomManager_1.default.Instance.removeRoom(_this._rid);
                }
            }
        }, 16);
    };
    Game.prototype.stop = function () {
        clearInterval(this._tid);
    };
    Game.prototype.sendFrame = function () {
        var ctrls = [];
        var framepack;
        if (this._ctrlList.length > 0) {
            ctrls = this._ctrlList.splice(0, this._ctrlList.length);
        }
        framepack = {
            keyframe: this._keyframe,
            ctrls: ctrls
        };
        this._io.to(this._rid).emit('frame:update', framepack);
        this._keyframe += 1;
    };
    Game.prototype.addCtrl = function (ctrl) {
        this._ctrlList.push(ctrl);
    };
    return Game;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Game;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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RUFBRSxDQUFDO1FBQzVCLElBQUksU0FBb0IsQ0FBQztRQUV6QixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBRUQsU0FBUyxHQUFHO1lBQ1YsUUFBUSxFQUFDLElBQUksQ0FBQyxTQUFTO1lBQ3ZCLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQztRQUVGLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxzQkFBTyxHQUFkLFVBQWUsSUFBVTtRQUNyQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBQ0wsV0FBQztBQUFELENBekVBLEFBeUVDLElBQUE7QUF6RUQ7c0JBeUVDLENBQUEiLCJmaWxlIjoiR2FtZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVc2VyIGZyb20gJy4vdXNlci9Vc2VyJztcbmltcG9ydCBSb29tTWFuYWdlciBmcm9tICcuL3Jvb20vUm9vbU1hbmFnZXInO1xuXG5jb25zdCBUaW1lckNvbmZpZyA9IHtcbiAgICB0aW1lOiAxODRcbn07XG5cbi8vIOW4p+abtOaWsOWMhVxuaW50ZXJmYWNlIEZyYW1lUGFjayB7XG4gICAga2V5ZnJhbWU6IG51bWJlcjtcbiAgICBjdHJsczogQXJyYXk8Q3RybD47XG59XG5cbi8vIOeUqOaIt+aTjeS9nFxuaW50ZXJmYWNlIEN0cmwge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgY3RybDoge1xuICAgICAgYW5nbGU6IG51bWJlcixcbiAgICAgIHBvd2VyOiBudW1iZXJcbiAgICB9XG59XG5cbi8qKlxuICog5ri45oiP6YC76L6R57G7XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWUge1xuICAgIHByaXZhdGUgX3RpZDogTm9kZUpTLlRpbWVyO1xuICAgIHByaXZhdGUgX2lvOiBTb2NrZXRJTy5TZXJ2ZXI7XG4gICAgcHJpdmF0ZSBfcmlkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfa2V5ZnJhbWU6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBfY3RybExpc3Q6IEFycmF5PEN0cmw+ID0gW107XG4gICAgcHJpdmF0ZSBfdWlkTGlzdDogQXJyYXk8c3RyaW5nPjtcbiAgICBwcml2YXRlIF90aW1lOiBudW1iZXIgPSBUaW1lckNvbmZpZy50aW1lO1xuICAgIHByaXZhdGUgX2ZyYW1lOiBudW1iZXIgPSAwO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKHJpZDogc3RyaW5nLCB1c2VybGlzdDogQXJyYXk8VXNlcj4pIHtcbiAgICAgICAgdGhpcy5fcmlkID0gcmlkO1xuICAgICAgICB0aGlzLl91aWRMaXN0ID0gW3VzZXJsaXN0WzBdLnVpZCwgdXNlcmxpc3RbMV0udWlkXTtcbiAgICAgICAgdGhpcy5faW8gPSBSb29tTWFuYWdlci5JbnN0YW5jZS5pbztcbiAgICB9XG4gICAgXG4gICAgcHVibGljIHN0YXJ0KCkge1xuICAgICAgICBsZXQgcmFuZG9tID0gTWF0aC5yYW5kb20oKSA+IC41PyAxIDogMDtcbiAgICAgICAgbGV0IGRpcmVjdGlvbkxpc3QgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDg7IGkrKykge1xuICAgICAgICAgICAgZGlyZWN0aW9uTGlzdC5wdXNoKE1hdGgucmFuZG9tKCkgPiAuNT8gMSA6IDApO1xuICAgICAgICB9XG4gICAgICAgIFJvb21NYW5hZ2VyLkluc3RhbmNlLmlvLnRvKHRoaXMuX3JpZCkuZW1pdCgnZ2FtZTpzdGFydCcsIHtpbmZvOiAnc3RhcnQnLCBkaXJlY3Rpb25zOiBkaXJlY3Rpb25MaXN0LCBpZDogcmFuZG9tPyB0aGlzLl91aWRMaXN0WzBdIDogdGhpcy5fdWlkTGlzdFsxXX0pO1xuXG4gICAgICAgIHRoaXMuX3RpZCA9IHNldEludGVydmFsKCgpID0+IHtcblxuICAgICAgICAgICAgLy8g5Y+R6YCB5Li76KaB5binXG4gICAgICAgICAgICB0aGlzLnNlbmRGcmFtZSgpO1xuXG4gICAgICAgICAgICAvLyDorqHml7blmahcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lKys7XG4gICAgICAgICAgICBpZih0aGlzLl9mcmFtZSA+PSA2MCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lLS07XG4gICAgICAgICAgICAgICAgaWYodGhpcy5fdGltZSA8PSAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g5pe26Ze05Yiw5ri45oiP57uT5p2f77yMIOWPkemAgeWIhuaVsOaVsOaNrlxuICAgICAgICAgICAgICAgICAgICBsZXQgcm9vbSA9IFJvb21NYW5hZ2VyLkluc3RhbmNlLmdldFJvb20odGhpcy5fcmlkKTtcblxuICAgICAgICAgICAgICAgICAgICBSb29tTWFuYWdlci5JbnN0YW5jZS5pby50byh0aGlzLl9yaWQpLmVtaXQoJ2dhbWU6c2NvcmVzJywge3Njb3Jlczogcm9vbS5zY29yZUhlbHBlci5nZXRTY29yZSgpfSk7XG4gICAgICAgICAgICAgICAgICAgIFJvb21NYW5hZ2VyLkluc3RhbmNlLnJlbW92ZVJvb20odGhpcy5fcmlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDE2KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RvcCgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl90aWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWPkemAgea4uOaIj+W4p+aVsOaNrlxuICAgICAqL1xuICAgIHByaXZhdGUgc2VuZEZyYW1lKCkge1xuICAgICAgICBsZXQgY3RybHM6IEFycmF5PEN0cmw+ID0gW107XG4gICAgICAgIGxldCBmcmFtZXBhY2s6IEZyYW1lUGFjaztcblxuICAgICAgICBpZih0aGlzLl9jdHJsTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY3RybHMgPSB0aGlzLl9jdHJsTGlzdC5zcGxpY2UoMCwgdGhpcy5fY3RybExpc3QubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZyYW1lcGFjayA9IHtcbiAgICAgICAgICBrZXlmcmFtZTp0aGlzLl9rZXlmcmFtZSxcbiAgICAgICAgICBjdHJsczogY3RybHNcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9pby50byh0aGlzLl9yaWQpLmVtaXQoJ2ZyYW1lOnVwZGF0ZScsIGZyYW1lcGFjayk7XG4gICAgICAgIHRoaXMuX2tleWZyYW1lICs9IDE7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEN0cmwoY3RybDogQ3RybCkge1xuICAgICAgICB0aGlzLl9jdHJsTGlzdC5wdXNoKGN0cmwpO1xuICAgIH1cbn0iXX0=
