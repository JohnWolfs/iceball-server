"use strict";
var RoomManager_1 = require('./room/RoomManager');
var TimerConfig = {
    time: 184
};
var Game = (function () {
    function Game(rid, userlist) {
        this._keyframe = 0;
        this._ctrlList = [];
        this._time = TimerConfig.time;
        this._frame = 0;
        this._rid = rid;
        this._uidList = [userlist[0].uid, userlist[1].uid];
        this._io = RoomManager_1.default.Instance.io;
    }
    Game.prototype.start = function () {
        var _this = this;
        var random = Math.random() > .5 ? 1 : 0;
        var directionList = [];
        for (var i = 0; i < 8; i++) {
            directionList.push(Math.random() > .5 ? 1 : 0);
        }
        RoomManager_1.default.Instance.io.to(this._rid).emit('game:start', { info: 'start', directions: directionList, id: random ? this._uidList[0] : this._uidList[1] });
        this._tid = setInterval(function () {
            _this.sendFrame();
            _this._frame++;
            if (_this._frame >= 60) {
                _this._frame = 0;
                _this._time--;
                if (_this._time <= 0) {
                    var room = RoomManager_1.default.Instance.getRoom(_this._rid);
                    RoomManager_1.default.Instance.io.to(_this._rid).emit('game:scores', { scores: room.scoreHelper.getScore() });
                    RoomManager_1.default.Instance.removeRoom(_this._rid);
                }
            }
        }, 16);
    };
    Game.prototype.stop = function () {
        clearInterval(this._tid);
    };
    Game.prototype.sendFrame = function () {
        var ctrls = [];
        var framepack;
        if (this._ctrlList.length > 0) {
            ctrls = this._ctrlList.splice(0, this._ctrlList.length);
        }
        framepack = {
            keyframe: this._keyframe,
            ctrls: ctrls
        };
        this._io.to(this._rid).emit('frame:update', framepack);
        this._keyframe += 1;
    };
    Game.prototype.addCtrl = function (ctrl) {
        this._ctrlList.push(ctrl);
    };
    return Game;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Game;

//# sourceMappingURL=data:application/json;base64,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RUFBRSxDQUFDO1FBQzVCLElBQUksU0FBb0IsQ0FBQztRQUV6QixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBRUQsU0FBUyxHQUFHO1lBQ1YsUUFBUSxFQUFDLElBQUksQ0FBQyxTQUFTO1lBQ3ZCLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQztRQUVGLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxzQkFBTyxHQUFkLFVBQWUsSUFBVTtRQUNyQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBQ0wsV0FBQztBQUFELENBekVBLEFBeUVDLElBQUE7QUF6RUQ7c0JBeUVDLENBQUEiLCJmaWxlIjoiR2FtZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVc2VyIGZyb20gJy4vdXNlci9Vc2VyJztcclxuaW1wb3J0IFJvb21NYW5hZ2VyIGZyb20gJy4vcm9vbS9Sb29tTWFuYWdlcic7XHJcblxyXG5jb25zdCBUaW1lckNvbmZpZyA9IHtcclxuICAgIHRpbWU6IDE4NFxyXG59O1xyXG5cclxuLy8g5bin5pu05paw5YyFXHJcbmludGVyZmFjZSBGcmFtZVBhY2sge1xyXG4gICAga2V5ZnJhbWU6IG51bWJlcjtcclxuICAgIGN0cmxzOiBBcnJheTxDdHJsPjtcclxufVxyXG5cclxuLy8g55So5oi35pON5L2cXHJcbmludGVyZmFjZSBDdHJsIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBjdHJsOiB7XHJcbiAgICAgIGFuZ2xlOiBudW1iZXIsXHJcbiAgICAgIHBvd2VyOiBudW1iZXJcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIOa4uOaIj+mAu+i+keexu1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSB7XHJcbiAgICBwcml2YXRlIF90aWQ6IE5vZGVKUy5UaW1lcjtcclxuICAgIHByaXZhdGUgX2lvOiBTb2NrZXRJTy5TZXJ2ZXI7XHJcbiAgICBwcml2YXRlIF9yaWQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgX2tleWZyYW1lOiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBfY3RybExpc3Q6IEFycmF5PEN0cmw+ID0gW107XHJcbiAgICBwcml2YXRlIF91aWRMaXN0OiBBcnJheTxzdHJpbmc+O1xyXG4gICAgcHJpdmF0ZSBfdGltZTogbnVtYmVyID0gVGltZXJDb25maWcudGltZTtcclxuICAgIHByaXZhdGUgX2ZyYW1lOiBudW1iZXIgPSAwO1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcihyaWQ6IHN0cmluZywgdXNlcmxpc3Q6IEFycmF5PFVzZXI+KSB7XHJcbiAgICAgICAgdGhpcy5fcmlkID0gcmlkO1xyXG4gICAgICAgIHRoaXMuX3VpZExpc3QgPSBbdXNlcmxpc3RbMF0udWlkLCB1c2VybGlzdFsxXS51aWRdO1xyXG4gICAgICAgIHRoaXMuX2lvID0gUm9vbU1hbmFnZXIuSW5zdGFuY2UuaW87XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBzdGFydCgpIHtcclxuICAgICAgICBsZXQgcmFuZG9tID0gTWF0aC5yYW5kb20oKSA+IC41PyAxIDogMDtcclxuICAgICAgICBsZXQgZGlyZWN0aW9uTGlzdCA9IFtdO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuICAgICAgICAgICAgZGlyZWN0aW9uTGlzdC5wdXNoKE1hdGgucmFuZG9tKCkgPiAuNT8gMSA6IDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBSb29tTWFuYWdlci5JbnN0YW5jZS5pby50byh0aGlzLl9yaWQpLmVtaXQoJ2dhbWU6c3RhcnQnLCB7aW5mbzogJ3N0YXJ0JywgZGlyZWN0aW9uczogZGlyZWN0aW9uTGlzdCwgaWQ6IHJhbmRvbT8gdGhpcy5fdWlkTGlzdFswXSA6IHRoaXMuX3VpZExpc3RbMV19KTtcclxuXHJcbiAgICAgICAgdGhpcy5fdGlkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy8g5Y+R6YCB5Li76KaB5binXHJcbiAgICAgICAgICAgIHRoaXMuc2VuZEZyYW1lKCk7XHJcblxyXG4gICAgICAgICAgICAvLyDorqHml7blmahcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWUrKztcclxuICAgICAgICAgICAgaWYodGhpcy5fZnJhbWUgPj0gNjApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RpbWUtLTtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuX3RpbWUgPD0gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyDml7bpl7TliLDmuLjmiI/nu5PmnZ/vvIwg5Y+R6YCB5YiG5pWw5pWw5o2uXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJvb20gPSBSb29tTWFuYWdlci5JbnN0YW5jZS5nZXRSb29tKHRoaXMuX3JpZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIFJvb21NYW5hZ2VyLkluc3RhbmNlLmlvLnRvKHRoaXMuX3JpZCkuZW1pdCgnZ2FtZTpzY29yZXMnLCB7c2NvcmVzOiByb29tLnNjb3JlSGVscGVyLmdldFNjb3JlKCl9KTtcclxuICAgICAgICAgICAgICAgICAgICBSb29tTWFuYWdlci5JbnN0YW5jZS5yZW1vdmVSb29tKHRoaXMuX3JpZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAxNik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0b3AoKSB7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl90aWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+R6YCB5ri45oiP5bin5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2VuZEZyYW1lKCkge1xyXG4gICAgICAgIGxldCBjdHJsczogQXJyYXk8Q3RybD4gPSBbXTtcclxuICAgICAgICBsZXQgZnJhbWVwYWNrOiBGcmFtZVBhY2s7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX2N0cmxMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGN0cmxzID0gdGhpcy5fY3RybExpc3Quc3BsaWNlKDAsIHRoaXMuX2N0cmxMaXN0Lmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmcmFtZXBhY2sgPSB7XHJcbiAgICAgICAgICBrZXlmcmFtZTp0aGlzLl9rZXlmcmFtZSxcclxuICAgICAgICAgIGN0cmxzOiBjdHJsc1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuX2lvLnRvKHRoaXMuX3JpZCkuZW1pdCgnZnJhbWU6dXBkYXRlJywgZnJhbWVwYWNrKTtcclxuICAgICAgICB0aGlzLl9rZXlmcmFtZSArPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRDdHJsKGN0cmw6IEN0cmwpIHtcclxuICAgICAgICB0aGlzLl9jdHJsTGlzdC5wdXNoKGN0cmwpO1xyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
