"use strict";
var UserManager_1 = require('./user/UserManager');
var RoomManager_1 = require('./room/RoomManager');
var ClientEvent = {
    'disconnect': function () {
        var uid = this.user.uid;
        var rid = this.user.rid;
        var room = RoomManager_1.default.Instance.getRoom(rid);
        if (room) {
            RoomManager_1.default.Instance.io.to(rid).emit('game:scores', { scores: room.scoreHelper.getScore(), msg: '你的对手离开了游戏' });
            RoomManager_1.default.Instance.removeRoom(rid);
        }
        UserManager_1.default.Instance.removeUser(uid);
        RoomManager_1.default.Instance.removeFromWaitList(uid);
        console.log('===> [user ' + this.socket.id + '] disconnect');
    },
    'user:login': function (data) {
        this.user.name = data.name;
        this.socket.emit('user:loginSuccess', { uid: this.user.uid, username: data.name });
        console.log('System:  [name: ' + this.user.name + '] log in.');
    },
    'user:ready': function () {
        var rid = this.user.rid;
        var uid = this.user.uid;
        var room = RoomManager_1.default.Instance.getRoom(rid);
        if (room)
            room.getReady(uid);
    },
    'user:ctrl': function (ctrl) {
        var game;
        var rid = this.user.rid;
        var room = RoomManager_1.default.Instance.getRoom(rid);
        if (!room || room.status === 0) {
            this.socket.emit('sys:msg', { msg: 'room not exist' });
            return;
        }
        game = room.game;
        if (game)
            game.addCtrl(ctrl);
        else {
            this.socket.emit('sys:msg', { msg: 'game not exist' });
        }
    },
    'room:match': function () {
        RoomManager_1.default.Instance.addToWaitList(this.user);
    },
    'room:join': function () {
    },
    'room:create': function () {
    },
    'game:scorein': function (data) {
        var rid = this.user.rid;
        var room = RoomManager_1.default.Instance.getRoom(rid);
        switch (data.type) {
            case 'bulletExplosion': {
                room.scoreHelper.scorein(data.id, 'bulletExplosion');
                RoomManager_1.default.Instance.io.to(rid).emit('game:scorein', { id: this.user.uid, scores: room.scoreHelper.getScore(this.user.uid) });
                break;
            }
            case 'ballin': {
                room.scoreHelper.scorein(data.id, 'ballin');
                RoomManager_1.default.Instance.io.to(rid).emit('game:scorein', { id: this.user.uid, scores: room.scoreHelper.getScore(this.user.uid) });
                if (room.scoreHelper.checkWin(data.id)) {
                    RoomManager_1.default.Instance.io.to(rid).emit('game:scores', { scores: room.scoreHelper.getScore() });
                    RoomManager_1.default.Instance.removeRoom(rid);
                }
                break;
            }
        }
    }
};
var ConnectionManager = (function () {
    function ConnectionManager() {
    }
    ConnectionManager.prototype.initSocketEvent = function (socket, user) {
        this.socket = socket;
        this.user = user;
        for (var i in ClientEvent) {
            socket.on(i, ClientEvent[i].bind(this));
        }
    };
    return ConnectionManager;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ConnectionManager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
