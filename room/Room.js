"use strict";
var Game_1 = require('../Game');
var ScoreHelper_1 = require('./ScoreHelper');
var Room = (function () {
    function Room(rid, user1, user2) {
        this._readyList = [];
        this.status = 1;
        this._rid = rid;
        this._userList = [user1, user2];
        this._socketList = [user1.socket, user2.socket];
        this._userList[0].rid = this._rid;
        this._userList[1].rid = this._rid;
        this._socketList[0].join(this._rid);
        this._socketList[1].join(this._rid);
        this._scoreHelper = new ScoreHelper_1.default(user1.uid, user1.name, user2.uid, user2.name);
        var direction = Math.random() < 0.5 ? 0 : 1;
        this._socketList[0].emit('room:created', { opponent: user2.name, ballDirection: direction });
        this._socketList[1].emit('room:created', { opponent: user1.name, ballDirection: 1 - direction });
        console.log('System:  create room for [' + this._userList[0].uid + ' and ' + this._userList[1].uid + ']');
        console.log('<=== emit room:created to [' + this._userList[0].uid + ' and ' + this._userList[1].uid + ']');
    }
    Object.defineProperty(Room.prototype, "rid", {
        get: function () {
            return this._rid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "game", {
        get: function () {
            return this._game;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Room.prototype, "scoreHelper", {
        get: function () {
            return this._scoreHelper;
        },
        enumerable: true,
        configurable: true
    });
    Room.prototype.getReady = function (uid) {
        this._readyList.push(uid);
        if (this._readyList.length === 2) {
            this._game = new Game_1.default(this._rid, this._userList);
            this._game.start();
            this._readyList = [];
        }
    };
    Room.prototype.stopGame = function () {
        this.status = 0;
        if (this._game)
            this._game.stop();
    };
    Room.prototype.destroy = function () {
        this.stopGame();
        if (this._socketList[0])
            this._socketList[0].leave(this._rid);
        if (this._socketList[1])
            this._socketList[1].leave(this._rid);
    };
    Room.prototype.isObjectValueEqual = function (a, b) {
        var aProps = Object.getOwnPropertyNames(a);
        var bProps = Object.getOwnPropertyNames(b);
        if (aProps.length != bProps.length) {
            return false;
        }
        for (var i = 0; i < aProps.length; i++) {
            var propName = aProps[i];
            if (a[propName] !== b[propName]) {
                return false;
            }
        }
        return true;
    };
    return Room;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Room;

//# sourceMappingURL=data:application/json;base64,
