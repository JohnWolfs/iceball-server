"use strict";
var ScoreConfig = {
    bulletExplosions: 1,
    balls: 8,
    winBalls: 10
};
var ScoreHelper = (function () {
    function ScoreHelper(id1, name1, id2, name2) {
        this._scoreList = new Array(2);
        this._scoreList[0] = {
            id: '',
            name: '',
            score: 0,
            balls: 0,
            bulletExplosions: 0
        };
        this._scoreList[1] = {
            id: '',
            name: '',
            score: 0,
            balls: 0,
            bulletExplosions: 0
        };
        this._scoreList[0].id = id1;
        this._scoreList[0].name = name1;
        this._scoreList[1].id = id2;
        this._scoreList[1].name = name2;
    }
    ScoreHelper.prototype.causeExplosion = function (id) {
        for (var i = 0, l = this._scoreList.length; i < l; i++) {
            if (this._scoreList[i].id === id) {
                this._scoreList[i].bulletExplosions += 1;
                this._scoreList[i].score += ScoreConfig.bulletExplosions;
            }
        }
    };
    ScoreHelper.prototype.scorein = function (id, scoreType) {
        for (var i = 0, l = this._scoreList.length; i < l; i++) {
            if (this._scoreList[i].id === id) {
                switch (scoreType) {
                    case 'bulletExplosion': {
                        this._scoreList[i].bulletExplosions += 1;
                        this._scoreList[i].score += ScoreConfig.bulletExplosions;
                        break;
                    }
                    case 'ballin': {
                        this._scoreList[i].balls += 1;
                        this._scoreList[i].score += ScoreConfig.balls;
                        break;
                    }
                }
            }
        }
    };
    ScoreHelper.prototype.checkWin = function (id) {
        for (var i = 0, l = this._scoreList.length; i < l; i++) {
            if (this._scoreList[i].id === id) {
                if (this._scoreList[i].balls === ScoreConfig.winBalls)
                    return true;
            }
        }
        return false;
    };
    ScoreHelper.prototype.ballIn = function (id) {
        for (var i = 0, l = this._scoreList.length; i < l; i++) {
            if (this._scoreList[i].id === id) {
                this._scoreList[i].balls += 1;
                this._scoreList[i].score += ScoreConfig.balls;
                if (this._scoreList[i].balls === ScoreConfig.winBalls) {
                    return true;
                }
            }
        }
        return false;
    };
    ScoreHelper.prototype.getScore = function (uid) {
        if (uid) {
            for (var i = 0; i < this._scoreList.length; i++) {
                if (this._scoreList[i].id === uid) {
                    return this._scoreList[i];
                }
            }
        }
        else
            return this._scoreList;
    };
    return ScoreHelper;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ScoreHelper;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
