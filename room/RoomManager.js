"use strict";
var Room_1 = require('./Room');
var RoomManager = (function () {
    function RoomManager() {
        this._roomList = [];
        this._waitList = [];
    }
    Object.defineProperty(RoomManager, "Instance", {
        get: function () {
            if (RoomManager.instance == null) {
                RoomManager.instance = new RoomManager();
            }
            return RoomManager.instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoomManager.prototype, "io", {
        get: function () {
            return this._io;
        },
        set: function (io) {
            this._io = io;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoomManager.prototype, "roomList", {
        get: function () {
            return this._roomList;
        },
        enumerable: true,
        configurable: true
    });
    RoomManager.prototype.generateRid = function (user1, user2) {
        return user1.uid + user2.uid;
    };
    RoomManager.prototype.createRoom = function (rid, user1, user2) {
        var room = new Room_1.default(rid, user1, user2);
        this._roomList.push(room);
        return room;
    };
    RoomManager.prototype.getRoom = function (rid) {
        for (var i = 0, l = this._roomList.length; i < l; i++) {
            if (this._roomList[i].rid === rid) {
                return this._roomList[i];
            }
        }
    };
    RoomManager.prototype.removeRoom = function (rid) {
        for (var i = 0, l = this._roomList.length; i < l; i++) {
            if (this._roomList[i].rid === rid) {
                this._roomList[i].destroy();
                this._roomList.splice(i, 1);
                return true;
            }
        }
        return false;
    };
    RoomManager.prototype.startWatching = function () {
        var _this = this;
        var t = setInterval(function () {
            if (_this._waitList.length >= 2) {
                var users = _this._waitList.splice(0, 2);
                var rid = _this.generateRid(users[0], users[1]);
                _this.createRoom(rid, users[0], users[1]);
            }
        }, 2000);
    };
    RoomManager.prototype.addToWaitList = function (user) {
        this._waitList.push(user);
        console.log('System:  ' + this._waitList.length + ' users waiting.');
    };
    RoomManager.prototype.removeFromWaitList = function (uid) {
        for (var i = 0, l = this._waitList.length; i < l; i++) {
            if (this._waitList[i].uid === uid) {
                this._waitList.splice(i, 1);
            }
        }
    };
    return RoomManager;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = RoomManager;

//# sourceMappingURL=data:application/json;base64,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YWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSb29tIGZyb20gJy4vUm9vbSc7XHJcbmltcG9ydCBVc2VyIGZyb20gJy4uL3VzZXIvVXNlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb29tTWFuYWdlciB7XHJcbiAgICBwcml2YXRlIF9yb29tTGlzdDogQXJyYXk8Um9vbT47XHJcbiAgICBwcml2YXRlIF93YWl0TGlzdDogQXJyYXk8VXNlcj47XHJcbiAgICBwcml2YXRlIF9pbzogU29ja2V0SU8uU2VydmVyO1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9yb29tTGlzdCA9IFtdO1xyXG4gICAgICAgIHRoaXMuX3dhaXRMaXN0ID0gW107XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOWNleS+i1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFJvb21NYW5hZ2VyO1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXQgSW5zdGFuY2UoKTogUm9vbU1hbmFnZXIge1xyXG4gICAgICAgIGlmIChSb29tTWFuYWdlci5pbnN0YW5jZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIFJvb21NYW5hZ2VyLmluc3RhbmNlID0gbmV3IFJvb21NYW5hZ2VyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBSb29tTWFuYWdlci5pbnN0YW5jZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZ2V0IGlvKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbztcclxuICAgIH1cclxuXHJcbiAgICBzZXQgaW8oaW86IFNvY2tldElPLlNlcnZlcikge1xyXG4gICAgICAgIHRoaXMuX2lvID0gaW87XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJvb21MaXN0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yb29tTGlzdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyDorqHnrpfmiL/pl7RpZFxyXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVJpZCh1c2VyMTogVXNlciwgdXNlcjI6IFVzZXIpIHtcclxuICAgICAgICByZXR1cm4gdXNlcjEudWlkICsgdXNlcjIudWlkOyBcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g5qC55o2u5oi/6Ze0aWTliJvlu7rmiL/pl7RcclxuICAgIHB1YmxpYyBjcmVhdGVSb29tKHJpZDogc3RyaW5nLCB1c2VyMTogVXNlciwgdXNlcjI6IFVzZXIpOiBSb29tIHtcclxuICAgICAgICBsZXQgcm9vbSA9IG5ldyBSb29tKHJpZCwgdXNlcjEsIHVzZXIyKTtcclxuICAgICAgICB0aGlzLl9yb29tTGlzdC5wdXNoKHJvb20pO1xyXG4gICAgICAgIHJldHVybiByb29tO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDmoLnmja7miL/pl7RpZOiOt+WPluaIv+mXtFxyXG4gICAgcHVibGljIGdldFJvb20ocmlkOiBzdHJpbmcpOiBSb29tIHtcclxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5fcm9vbUxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX3Jvb21MaXN0W2ldLnJpZCA9PT0gcmlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcm9vbUxpc3RbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOenu+mZpOaIv+mXtFxyXG4gICAgcHVibGljIHJlbW92ZVJvb20ocmlkOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5fcm9vbUxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX3Jvb21MaXN0W2ldLnJpZCA9PT0gcmlkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yb29tTGlzdFtpXS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yb29tTGlzdC5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOW8gOWni+ebkea1i+aOkumYn+mYn+WIl1xyXG4gICAgcHVibGljIHN0YXJ0V2F0Y2hpbmcoKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX3dhaXRMaXN0Lmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdXNlcnMgPSB0aGlzLl93YWl0TGlzdC5zcGxpY2UoMCwgMik7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmlkID0gdGhpcy5nZW5lcmF0ZVJpZCh1c2Vyc1swXSwgdXNlcnNbMV0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVSb29tKHJpZCwgdXNlcnNbMF0sIHVzZXJzWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIDIwMDApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDliqDlhaXnrYnlvoXpmJ/liJdcclxuICAgIHB1YmxpYyBhZGRUb1dhaXRMaXN0KHVzZXI6IFVzZXIpIHtcclxuICAgICAgICB0aGlzLl93YWl0TGlzdC5wdXNoKHVzZXIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdTeXN0ZW06ICAnICsgdGhpcy5fd2FpdExpc3QubGVuZ3RoICsgJyB1c2VycyB3YWl0aW5nLicpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDnp7vlh7rnrYnlvoXpmJ/liJdcclxuICAgIHB1YmxpYyByZW1vdmVGcm9tV2FpdExpc3QodWlkOiBzdHJpbmcpIHtcclxuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5fd2FpdExpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuX3dhaXRMaXN0W2ldLnVpZCA9PT0gdWlkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl93YWl0TGlzdC5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
