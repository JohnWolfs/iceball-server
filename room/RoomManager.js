"use strict";
var Room_1 = require('./Room');
var RoomManager = (function () {
    function RoomManager() {
        this._roomList = [];
        this._waitList = [];
    }
    Object.defineProperty(RoomManager, "Instance", {
        get: function () {
            if (RoomManager.instance == null) {
                RoomManager.instance = new RoomManager();
            }
            return RoomManager.instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoomManager.prototype, "io", {
        get: function () {
            return this._io;
        },
        set: function (io) {
            this._io = io;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoomManager.prototype, "roomList", {
        get: function () {
            return this._roomList;
        },
        enumerable: true,
        configurable: true
    });
    RoomManager.prototype.generateRid = function (user1, user2) {
        return user1.uid + user2.uid;
    };
    RoomManager.prototype.createRoom = function (rid, user1, user2) {
        var room = new Room_1.default(rid, user1, user2);
        this._roomList.push(room);
        return room;
    };
    RoomManager.prototype.getRoom = function (rid) {
        for (var i = 0, l = this._roomList.length; i < l; i++) {
            if (this._roomList[i].rid === rid) {
                return this._roomList[i];
            }
        }
    };
    RoomManager.prototype.removeRoom = function (rid) {
        for (var i = 0, l = this._roomList.length; i < l; i++) {
            if (this._roomList[i].rid === rid) {
                this._roomList[i].destroy();
                this._roomList.splice(i, 1);
                return true;
            }
        }
        return false;
    };
    RoomManager.prototype.startWatching = function () {
        var _this = this;
        var t = setInterval(function () {
            if (_this._waitList.length >= 2) {
                var users = _this._waitList.splice(0, 2);
                var rid = _this.generateRid(users[0], users[1]);
                _this.createRoom(rid, users[0], users[1]);
            }
        }, 2000);
    };
    RoomManager.prototype.addToWaitList = function (user) {
        this._waitList.push(user);
        console.log('System:  ' + this._waitList.length + ' users waiting.');
    };
    RoomManager.prototype.removeFromWaitList = function (uid) {
        for (var i = 0, l = this._waitList.length; i < l; i++) {
            if (this._waitList[i].uid === uid) {
                this._waitList.splice(i, 1);
            }
        }
    };
    return RoomManager;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = RoomManager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvb20vUm9vbU1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUFpQixRQUFRLENBQUMsQ0FBQTtBQUcxQjtJQUtJO1FBQ0ksSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUlELHNCQUFrQix1QkFBUTthQUExQjtZQUNJLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDL0IsV0FBVyxDQUFDLFFBQVEsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1lBQzdDLENBQUM7WUFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztRQUNoQyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDJCQUFFO2FBQU47WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNwQixDQUFDO2FBRUQsVUFBTyxFQUFtQjtZQUN0QixJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNsQixDQUFDOzs7T0FKQTtJQU1ELHNCQUFJLGlDQUFRO2FBQVo7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUMxQixDQUFDOzs7T0FBQTtJQUdPLGlDQUFXLEdBQW5CLFVBQW9CLEtBQVcsRUFBRSxLQUFXO1FBQ3hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDakMsQ0FBQztJQUdNLGdDQUFVLEdBQWpCLFVBQWtCLEdBQVcsRUFBRSxLQUFXLEVBQUUsS0FBVztRQUNuRCxJQUFJLElBQUksR0FBRyxJQUFJLGNBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUdNLDZCQUFPLEdBQWQsVUFBZSxHQUFXO1FBQ3RCLEdBQUcsQ0FBQSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ25ELEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUdNLGdDQUFVLEdBQWpCLFVBQWtCLEdBQVc7UUFDekIsR0FBRyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDbkQsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7UUFDTCxDQUFDO1FBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBR00sbUNBQWEsR0FBcEI7UUFBQSxpQkFTQztRQVBHLElBQUksQ0FBQyxHQUFHLFdBQVcsQ0FBQztZQUNoQixFQUFFLENBQUEsQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixJQUFJLEtBQUssR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLElBQUksR0FBRyxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQyxLQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0MsQ0FBQztRQUNMLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNiLENBQUM7SUFHTSxtQ0FBYSxHQUFwQixVQUFxQixJQUFVO1FBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLGlCQUFpQixDQUFDLENBQUM7SUFDekUsQ0FBQztJQUdNLHdDQUFrQixHQUF6QixVQUEwQixHQUFXO1FBQ2pDLEdBQUcsQ0FBQSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ25ELEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoQyxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFDTCxrQkFBQztBQUFELENBM0ZBLEFBMkZDLElBQUE7QUEzRkQ7NkJBMkZDLENBQUEiLCJmaWxlIjoicm9vbS9Sb29tTWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSb29tIGZyb20gJy4vUm9vbSc7XG5pbXBvcnQgVXNlciBmcm9tICcuLi91c2VyL1VzZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb29tTWFuYWdlciB7XG4gICAgcHJpdmF0ZSBfcm9vbUxpc3Q6IEFycmF5PFJvb20+O1xuICAgIHByaXZhdGUgX3dhaXRMaXN0OiBBcnJheTxVc2VyPjtcbiAgICBwcml2YXRlIF9pbzogU29ja2V0SU8uU2VydmVyO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9yb29tTGlzdCA9IFtdO1xuICAgICAgICB0aGlzLl93YWl0TGlzdCA9IFtdO1xuICAgIH1cbiAgICBcbiAgICAvLyDljZXkvotcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogUm9vbU1hbmFnZXI7XG4gICAgcHVibGljIHN0YXRpYyBnZXQgSW5zdGFuY2UoKTogUm9vbU1hbmFnZXIge1xuICAgICAgICBpZiAoUm9vbU1hbmFnZXIuaW5zdGFuY2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgUm9vbU1hbmFnZXIuaW5zdGFuY2UgPSBuZXcgUm9vbU1hbmFnZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUm9vbU1hbmFnZXIuaW5zdGFuY2U7XG4gICAgfVxuICAgIFxuICAgIGdldCBpbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lvO1xuICAgIH1cblxuICAgIHNldCBpbyhpbzogU29ja2V0SU8uU2VydmVyKSB7XG4gICAgICAgIHRoaXMuX2lvID0gaW87XG4gICAgfVxuXG4gICAgZ2V0IHJvb21MaXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm9vbUxpc3Q7XG4gICAgfVxuXG4gICAgLy8g6K6h566X5oi/6Ze0aWRcbiAgICBwcml2YXRlIGdlbmVyYXRlUmlkKHVzZXIxOiBVc2VyLCB1c2VyMjogVXNlcikge1xuICAgICAgICByZXR1cm4gdXNlcjEudWlkICsgdXNlcjIudWlkOyBcbiAgICB9XG4gICAgXG4gICAgLy8g5qC55o2u5oi/6Ze0aWTliJvlu7rmiL/pl7RcbiAgICBwdWJsaWMgY3JlYXRlUm9vbShyaWQ6IHN0cmluZywgdXNlcjE6IFVzZXIsIHVzZXIyOiBVc2VyKTogUm9vbSB7XG4gICAgICAgIGxldCByb29tID0gbmV3IFJvb20ocmlkLCB1c2VyMSwgdXNlcjIpO1xuICAgICAgICB0aGlzLl9yb29tTGlzdC5wdXNoKHJvb20pO1xuICAgICAgICByZXR1cm4gcm9vbTtcbiAgICB9XG4gICAgXG4gICAgLy8g5qC55o2u5oi/6Ze0aWTojrflj5bmiL/pl7RcbiAgICBwdWJsaWMgZ2V0Um9vbShyaWQ6IHN0cmluZyk6IFJvb20ge1xuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5fcm9vbUxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZih0aGlzLl9yb29tTGlzdFtpXS5yaWQgPT09IHJpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yb29tTGlzdFtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDnp7vpmaTmiL/pl7RcbiAgICBwdWJsaWMgcmVtb3ZlUm9vbShyaWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBmb3IobGV0IGkgPSAwLCBsID0gdGhpcy5fcm9vbUxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZih0aGlzLl9yb29tTGlzdFtpXS5yaWQgPT09IHJpZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jvb21MaXN0W2ldLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yb29tTGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBcbiAgICAvLyDlvIDlp4vnm5HmtYvmjpLpmJ/pmJ/liJdcbiAgICBwdWJsaWMgc3RhcnRXYXRjaGluZygpIHtcbiAgICAgICAgXG4gICAgICAgIHZhciB0ID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgaWYodGhpcy5fd2FpdExpc3QubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgICBsZXQgdXNlcnMgPSB0aGlzLl93YWl0TGlzdC5zcGxpY2UoMCwgMik7XG4gICAgICAgICAgICAgICAgbGV0IHJpZCA9IHRoaXMuZ2VuZXJhdGVSaWQodXNlcnNbMF0sIHVzZXJzWzFdKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVJvb20ocmlkLCB1c2Vyc1swXSwgdXNlcnNbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAyMDAwKTtcbiAgICB9XG4gICAgXG4gICAgLy8g5Yqg5YWl562J5b6F6Zif5YiXXG4gICAgcHVibGljIGFkZFRvV2FpdExpc3QodXNlcjogVXNlcikge1xuICAgICAgICB0aGlzLl93YWl0TGlzdC5wdXNoKHVzZXIpO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ1N5c3RlbTogICcgKyB0aGlzLl93YWl0TGlzdC5sZW5ndGggKyAnIHVzZXJzIHdhaXRpbmcuJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIOenu+WHuuetieW+hemYn+WIl1xuICAgIHB1YmxpYyByZW1vdmVGcm9tV2FpdExpc3QodWlkOiBzdHJpbmcpIHtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgbCA9IHRoaXMuX3dhaXRMaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYodGhpcy5fd2FpdExpc3RbaV0udWlkID09PSB1aWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl93YWl0TGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59Il19
